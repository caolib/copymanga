version: 1.0.{build}

# 构建环境 - 仅 Windows
image: Visual Studio 2022

# 只在这些分支构建
branches:
  only:
    - main
    - master

# 跳过构建条件 - 如果提交消息不包含 "test:" 则跳过构建
skip_commits:
  message: /^(?!.*test:).*/

# 环境变量
environment:
  RUST_BACKTRACE: 1
  CI: true # 修复 Tauri CI 检测问题

# 克隆深度（加快克隆速度）
clone_depth: 10

# 安装阶段
install:
  # 安装 Rust
  - ps: |
      if (!(Get-Command "rustc" -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Rust..."
        Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "rustup-init.exe"
        .\rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable
        # 直接设置当前会话的 PATH
        $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
      }

  # 安装 pnpm
  - ps: |
      # 确保 Rust 在 PATH 中
      $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"

      if (!(Get-Command "pnpm" -ErrorAction SilentlyContinue)) {
        Write-Host "Installing pnpm..."
        npm install -g pnpm
      }

  # 验证安装
  - ps: |
      # 确保 PATH 正确设置
      $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
      Write-Host "Verifying installations..."
      rustc --version
      cargo --version
      pnpm --version

# 构建前
before_build:
  # 确保环境变量正确
  - ps: $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
  # 安装前端依赖
  - pnpm install --frozen-lockfile

# 构建脚本
build_script:
  # 设置正确的 CI 环境变量
  - ps: $env:CI = "true"
  # 构建 Tauri 应用 - 只构建 Windows exe 安装包
  - pnpm tauri build --bundles nsis

# 测试脚本（如果有的话）
test_script:
  - echo "Skipping tests for now"

# 构建产物 - 只保留 exe 安装包
artifacts:
  # Windows exe 安装包 (NSIS)
  - path: 'src-tauri\target\release\bundle\nsis\*.exe'
    name: windows-exe-installer

# 构建成功后的通知
on_success:
  - ps: Write-Host "Windows exe installer build completed successfully! 🎉"

# 构建失败后的通知
on_failure:
  - ps: Write-Host "Build failed! 😞"

# 缓存（加速后续构建）
cache:
  - '%USERPROFILE%\.cargo\registry'
  - '%USERPROFILE%\.cargo\git'
  - "node_modules"
