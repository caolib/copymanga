name: Release Notes Generator

on:
  # 当 publish workflow 成功完成后自动运行
  workflow_run:
    workflows: ["publish"]
    types:
      - completed
  # 也支持手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate release notes for (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    # 只有当 publish workflow 成功时才运行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录以便生成提交日志
      
      - name: Extract tag from workflow_run
        if: github.event_name == 'workflow_run'
        id: extract_tag
        run: |
          # 从 workflow_run 事件中提取 tag
          TAG_REF="${{ github.event.workflow_run.head_branch }}"
          if [[ $TAG_REF =~ ^refs/tags/(.+)$ ]]; then
            TAG="${BASH_REMATCH[1]}"
          else
            # 如果不是 tag 触发，尝试从最新的 tag 获取
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          fi
          
          if [[ -z "$TAG" ]]; then
            echo "无法提取标签，退出"
            exit 1
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "提取的标签: $TAG"
      
      - name: Set tag for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        id: manual_tag
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "手动指定的标签: $TAG"
      
      - name: Generate commit history
        id: commits
        run: |
          # 确定使用哪个标签
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ steps.manual_tag.outputs.tag }}"
          else
            TAG="${{ steps.extract_tag.outputs.tag }}"
          fi
          
          echo "生成标签 $TAG 的提交历史"
          
          # 获取所有标签并排序
          TAGS=($(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+'))
          
          CURRENT_TAG="$TAG"
          PREVIOUS_TAG=""
          
          # 找到当前标签的上一个标签
          for i in "${!TAGS[@]}"; do
            if [[ "${TAGS[$i]}" == "$CURRENT_TAG" && $((i + 1)) -lt ${#TAGS[@]} ]]; then
              PREVIOUS_TAG="${TAGS[$((i + 1))]}"
              break
            fi
          done
          
          echo "当前标签: $CURRENT_TAG"
          echo "上一个标签: $PREVIOUS_TAG"
          
          # 生成提交记录
          if [[ -n "$PREVIOUS_TAG" ]]; then
            COMMITS=$(git log "$PREVIOUS_TAG..$CURRENT_TAG" --pretty=format:'- [%h] %s' --reverse)
            RANGE="$PREVIOUS_TAG..$CURRENT_TAG"
          else
            COMMITS=$(git log "$CURRENT_TAG" --pretty=format:'- [%h] %s' --reverse)
            RANGE="首次发布..$CURRENT_TAG"
          fi
          
          # 过滤掉合并提交和文档提交
          FILTERED_COMMITS=$(echo "$COMMITS" | grep -v -E "(Merge (branch|pull request)|^- \[[a-f0-9]+\] (docs?:|README|\.md))" || true)
          
          COMMIT_COUNT=$(echo "$FILTERED_COMMITS" | wc -l)
          
          # 构建发布说明
          RELEASE_NOTES="## 📋 更新内容

**版本范围:** $RANGE  
**提交数量:** $COMMIT_COUNT

### Commit

$FILTERED_COMMITS

---
📋 [查看完整更新日志](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)"
          
          # 输出到 GitHub Actions
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
      
      - name: Update release with commit history
        uses: softprops/action-gh-release@v1
        with:
          # 重要：使用 app-v 前缀匹配 publish workflow 创建的 release
          tag_name: app-${{ steps.commits.outputs.current_tag }}
          body: |
            ${{ steps.commits.outputs.release_notes }}
          append_body: true
          make_latest: false
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Output summary
        run: |
          echo "✅ 已为 release 'app-${{ steps.commits.outputs.current_tag }}' 添加提交历史" >> $GITHUB_STEP_SUMMARY
          echo "📝 标签范围: ${{ steps.commits.outputs.previous_tag }}..${{ steps.commits.outputs.current_tag }}" >> $GITHUB_STEP_SUMMARY
