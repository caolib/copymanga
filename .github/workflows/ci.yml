name: "release"

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  cleanup-caches:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      actions: write
      contents: read
    steps:
      - name: Cleanup old caches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            console.log(`Found ${caches.actions_caches.length} caches`);

            // 保留最新的10个缓存，删除其他的
            const cachesToDelete = caches.actions_caches
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10); // 保留前10个最新的缓存

            console.log(`Deleting ${cachesToDelete.length} old caches`);

            let deletedCount = 0;
            for (const cache of cachesToDelete) {
              try {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
                deletedCount++;
                console.log(`✓ Deleted cache: ${cache.key}`);
              } catch (error) {
                console.log(`✗ Failed to delete cache ${cache.key}: ${error.message}`);
              }
            }

            console.log(`Successfully deleted ${deletedCount} caches`);

  release-notes:
    runs-on: ubuntu-22.04
    outputs:
      release_body: ${{ steps.release_notes.outputs.release_body }}
    steps:
      - uses: actions/checkout@v4
      - id: release_notes
        continue-on-error: true
        run: |
          if [ -f "./docs/RELEASE.md" ]; then
            {
              echo 'release_body<<EOF'
              cat "./docs/RELEASE.md"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          else
            echo "release_body=See the assets to download this version and install." >> "$GITHUB_OUTPUT"
          fi

  publish-tauri:
    needs: [release-notes, cleanup-caches]
    if: always() && (needs.release-notes.result == 'success' || needs.release-notes.result == 'skipped')
    permissions:
      contents: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        continue-on-error: true
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.1.0
        with:
          version: 10

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        continue-on-error: true
        with:
          workspaces: "./src-tauri -> target"
          cache-on-failure: true
          shared-key: ${{ matrix.platform }}
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: "Release v__VERSION__"
          releaseBody: ${{ needs.release-notes.outputs.release_body || 'See the assets to download this version and install.' }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
