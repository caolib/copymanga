name: "cleanup-cache"

on:
  schedule:
    # 每周日清理一次缓存
    - cron: "0 0 * * 0"
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Cleanup old caches
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            console.log(`Found ${caches.actions_caches.length} caches`);

            // 按创建时间排序，保留最新的15个缓存
            const sortedCaches = caches.actions_caches
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const cachesToKeep = sortedCaches.slice(0, 15);
            const cachesToDelete = sortedCaches.slice(15);

            console.log(`Keeping ${cachesToKeep.length} caches`);
            console.log(`Deleting ${cachesToDelete.length} caches`);

            let deletedCount = 0;
            let deletedSize = 0;

            for (const cache of cachesToDelete) {
              try {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
                deletedCount++;
                deletedSize += cache.size_in_bytes;
                console.log(`✓ Deleted cache: ${cache.key} (${(cache.size_in_bytes / 1024 / 1024).toFixed(2)} MB)`);
              } catch (error) {
                console.log(`✗ Failed to delete cache ${cache.key}: ${error.message}`);
                // 如果是权限问题，提供更详细的说明
                if (error.message.includes('Resource not accessible')) {
                  console.log(`  → This may require 'actions: write' permission in the workflow`);
                }
              }
            }

            // 显示剩余缓存大小和删除统计
            const remainingSize = cachesToKeep.reduce((sum, cache) => sum + cache.size_in_bytes, 0);
            console.log(`\n📊 Summary:`);
            console.log(`  Deleted: ${deletedCount} caches (${(deletedSize / 1024 / 1024 / 1024).toFixed(2)} GB)`);
            console.log(`  Remaining: ${cachesToKeep.length} caches (${(remainingSize / 1024 / 1024 / 1024).toFixed(2)} GB)`);
